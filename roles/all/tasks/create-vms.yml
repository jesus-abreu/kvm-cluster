
# ------------------------------------------------------------------
# This play creates the number of requested VMs and tech spec for them
# and install the request OS version and required storage source capacity.
#
# Jesus Natividad Rodriguez A, MIT license
# May 2025
# name: create-vms.yml
# ansible-playbook build-cluster.yml -e infra=create
# ------------------------------------------------------------------
---
- name: (create-vms.yml)Check if {{ bridge_name }} bridge exists using ip link
  command: ip link show {{ bridge_name }}
  register: bridge_check
  ignore_errors: yes

- name: (create-vms.yml)Show bridge status
  debug:
    msg: >-
      {{
        'Bridge ' + bridge_name + ' exists'
        if bridge_check.rc == 0 else
        'Bridge ' + bridge_name + ' does not exist'
      }}
- name: (create-vms.yml)Initialize empty VM â†’ IP map
  set_fact:
    vm_ip_map: {}
# As the bridge should exist before provisioning the VMs, I created this block
# to be executed conditioned to the existence of the default bridge: virbr0
- block:
  - name: (create-vms.yml)Render kickstart configs for each VM
    become: yes 
    template:
      src: ks.cfg.j2
      dest: "{{ kickstart_path }}/ks_{{ item }}.cfg"
    loop: "{{ vm_names }}"

  # we will render the kickstart file using python server on port 8000 or defined one
  - name: (create-vms.yml)Allow port 8000/tcp through UFW
    become: yes 
    ufw:
      rule: allow
      port: "{{ python_port }}"
      proto: tcp

  - name: (create-vms.yml)Ensure {{ kickstart_path }} directory exists
    become: yes 
    file:
      path: "{{ kickstart_path }}"
      state: directory
      mode: '0755'

  - name: (create-vms.yml)Create systemd service to serve kickstart files
    become: yes 
    copy:
      dest: /etc/systemd/system/ks_http_server.service
      content: |
        [Unit]
        Description=Kickstart file HTTP server on port 8000
        After=network.target

        [Service]
        WorkingDirectory={{ kickstart_path }}
        ExecStart=/usr/bin/python3 -m http.server 8000
        Restart=always

        [Install]
        WantedBy=multi-user.target

  - name: (create-vms.yml)Start and enable kickstart HTTP server
    become: yes 
    systemd:
      name: ks_http_server
      enabled: yes
      state: started

  - name: (create-vms.yml)Create VM disk for each VM
    become: yes 
    command: >
      qemu-img create -f qcow2 {{ disk_dir }}/{{ item }}.qcow2 {{ vm_master_disk }}
    loop: "{{ vm_names }}"
    args:
      creates: "{{ disk_dir }}/{{ item }}.qcow2"

  - name: Create each VM and capture its IP address
    include_tasks: create_single_vm.yml
    loop: "{{ vm_names }}"
    loop_control:
      loop_var: vm_item

  - name: (create-vms.yml)Show final vm_ip_map
    debug:
      var: vm_ip_map

  #The following task objectives could be accomplished through DNS resolution.
  - name: (create-vms.yml)Add VM host entries to /etc/hosts, to enable NGINX server resolution
    become: yes 
    lineinfile:
      path: /etc/hosts
      line: "{{ item.value }}    {{ item.key }}"
      state: present
      create: yes
      insertafter: EOF
    loop: "{{ vm_ip_map | dict2items }}"
  when: bridge_check.rc == 0

  

