# ------------------------------------------------------------------
# To test NGINX load balance services for created VMs in the  host.
# We only know the VMs name, but the ip.
#
# Jesus Natividad Rodriguez A, MIT license
# May 2025
# play name: test-infra.yml
# ansible-playbook build-cluster.yml -e infra=test
# ------------------------------------------------------------------
- name: Check if {{ bridge_name }} bridge exists using ip link
  command: ip link show {{ bridge_name }}
  register: bridge_check
  ignore_errors: yes

- name: Show bridge status
  debug:
    msg: >-
      {{
        'Bridge ' + bridge_name + ' exists'
        if bridge_check.rc == 0 else
        'Bridge ' + bridge_name + ' does not exist'
      }}

- block:
  - name: Check VM state
    command: virsh domstate {{ item }}
    register: vm_states
    loop: "{{ vm_names }}"
    loop_control:
      label: "{{ item }}"
    changed_when: false
    ignore_errors: true

  - name: Start VM if not running
    command: virsh start {{ item.item }}
    when:
      - item.rc == 0
      - "'running' not in item.stdout"
    loop: "{{ vm_states.results }}"
    loop_control:
      label: "{{ item.item }}"

  - name: Retrieve IP addresses of VMs
    shell: "nslookup {{ item }} | awk '/^Address: / { print $2 }' | tail -n1"
    register: vm_ips
    loop: "{{ vm_names }}"
    loop_control:
      label: "{{ item }}"
    changed_when: false

  - name: Create a dictionary of VM names and their IPs
    set_fact:
      vm_ip_map: >-
        {{
          dict(
            vm_ips.results
            | selectattr('rc', 'equalto', 0)
            | rejectattr('stdout', 'equalto', '')
            | map(attribute='item')
            | zip(vm_ips.results
                  | selectattr('rc', 'equalto', 0)
                  | rejectattr('stdout', 'equalto', '')
                  | map(attribute='stdout'))
          )
        }}

  - name: Display VM IPs
    debug:
      var: vm_ip_map

  - name: Perform multiple HTTP requests to NGINX load balancer
    uri:
      url: "http://{{ load_balancer_ip }}:{{ load_balancer_port }}"
      return_content: yes
    register: nginx_response_results
    loop: "{{ range(0, 10) | list }}"
    loop_control:
      label: "Request #{{ item }}"
    until: nginx_response_results.status == 200
    retries: 3
    delay: 2

  # Only If NGINX uses round-robin and VMs are responding in order
  - name: Map round-robin response index to VM names
    set_fact:
      vm_response_list_named: >-
        {{
          nginx_response_results.results
          | map(attribute='content')
          | select('defined')
          | list
          | zip(vm_names * (10 // vm_names | length + 1))
          | map('last')
          | list
        }}

  - name: Initialize response count map
    set_fact:
      vm_response_counts: {}

  - name: Count occurrences of each mapped VM
    set_fact:
      vm_response_counts: "{{ vm_response_counts | combine({ item: (vm_response_counts[item] | default(0)) + 1 }) }}"
    loop: "{{ vm_response_list_named }}"

  - name: Display NGINX load balancing results
    debug:
      msg: >-
        {% set total = vm_response_list_named | length %}
        NGINX Load Balancing Results:
        {% for vm, count in vm_response_counts.items() %}
        - VM: {{ vm }} | Responses: {{ count }} | Percentage: {{ (count / total * 100) | round(1) }}%
        {% endfor %}
        - Total | Responses: {{ total }} | Percentage: 100.0%

  when: bridge_check.rc == 0
